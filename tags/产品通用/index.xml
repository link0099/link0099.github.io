<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>产品通用 on Link&#39;Log</title>
    <link>http://link0099.github.io/tags/%E4%BA%A7%E5%93%81%E9%80%9A%E7%94%A8/</link>
    <description>Recent content in 产品通用 on Link&#39;Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Mar 2023 23:00:00 +0800</lastBuildDate><atom:link href="http://link0099.github.io/tags/%E4%BA%A7%E5%93%81%E9%80%9A%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创新产品规划思路</title>
      <link>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E5%88%9B%E6%96%B0%E4%BA%A7%E5%93%81%E8%A7%84%E5%88%92%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Thu, 23 Mar 2023 23:00:00 +0800</pubDate>
      
      <guid>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E5%88%9B%E6%96%B0%E4%BA%A7%E5%93%81%E8%A7%84%E5%88%92%E6%80%9D%E8%B7%AF/</guid>
      <description>前言 我曾在创业公司做了不少创新型业务，见证过不少自己公司及竞争对手各种自杀式演出，这里我总结一下我的规划思路。
创新业务有较大的不确定性，路径不清晰。产研属于成本，所做的事情都围绕着ROI，一方面也花资源探索机会，另一方面也不能无脑的去浪费资源，无中生有。
大部分情况，我们都会高估了自己的判断，低估了创新的不可预测性。
所以在不可预测的环境下找到了部分确定性，则至少能形成一个飞轮，即生产效率的飞轮。
生产效率的飞轮在创新业务大部周期中都是有效的，只有在发现需求最终不存在时才无效。因此在早期，去构建生产效率的竞争优势，在某时间内是可行的。
寻找确定性意味着有一些保守，代表着不折腾，寻求稳定的ROI，但短期价值感弱，在市场不明朗的情况下，这不是成败的决定性要素，因此也需要后续去主动出击。
所以我的创新产品规划思路，在业务成立之前基本可以分为2个阶段
第1阶段是为了构建主动出击的优势、应对未来的不确定性，构建地基达到「退可守」的效果 第2阶段是不停的主动出击，简称「快速出击」 阶段1：退可守 如果公司因创新业务而生，那退可守是很重要的，因为后续主动出击的成功概率是很低的，退可守能保证一个基本盘的持续积累，就像理财中最普通的储蓄行为，日拱一卒。
创新业务一般是拿着一个「供给」去寻找「需求」的情况，最开始的是需要业务侧在每个节点明确要验证的目标，第一个目标即验证市场需求。
首先需要了解供给的特性、价值点，因此可以筛选出匹配的潜在客户。产品规划首先要匹配上业务要验证的目标。
其次是产品要有自己的Roadmap，以防受到业务熵增影响。此阶段建议产品主导。
如果把产品规划理解成一个树状图，出发点即是树干，往往和公司的基因（先天优势\动力\初心）、产品特性关联，其次是上面是树枝。
产品后续的迭代往往根据业务发展存在多种可能性，比如一个基础能力，有很多应用场景，未来可能聚焦某领域。商业模式上，未来可能走saas，可能走项目。
在这些可能性中找到这些应用场景的相同点，这些即为树枝。
版本规划即是组合树枝的艺术，组合树枝一是找到功能点属于功能的模块，二是按频率定义层级。高频的树枝往往开在接近树干的部分，越往上越低频、应用场景越窄。
因此在早期产品按照此树的结构，层层往上迭代，逐层去往上开功能分支，这样可以保证底层结构稳固，上层随时可变，是我实践后感到的最优解。
大部分产品迭代是不可能完全按照产品的规划的，比如某个客户或老板在某个分支很高的需求。也就是需求可能合理，但是优先级不高。
在一定要做的情况下，这里我们可以按照树枝所属的位置去放，但是要注意一点，这个树枝，距离下面树干部分中间是有空缺的，空缺什么时候长，长成什么样不确定。
因此离已有树枝越远的功能，要做的耦合程度越低，极端情况下就是也要当做定制功能去开发。
0-1的结束标志在产品规划里要体现，即满足什么目标，某个最小的闭环。宣告着产品1-0阶段性结束，可以进入快攻阶段。
阶段2：快速出击 快速出击阶段，选择不同方向寻找增长时，在基础搭建好的情况下，一般是能和产品形成协同效应的，能持续带一些有价值的需求进产品线。
在业务层面，产品要提供有价值的建议：如切入用户群体怎么选，GTM策略怎么定，或者自己去Own一个高概率方向。
产品规划上此时可以退居辅助位，业务侧自然会有大量细分场景的需求进来，做好需求池管理更为重要。
同时生产效率的飞轮要持续运转，管理好需求池也是为了上线功能影响续的持续探索，同时产品在配合的过程有几个原则还是要注意的。
一是能不动产品尽量不动产品，此阶段还是在探索，成败不可知。故而在业务侧进行逐步验证时，最终才是落地验证。
二是需求太垂可直接上定制，我想大部分产品是没有行业know how的，为了快速响应业务和保持主线干净，可以大胆先走定制去验证市场。
三是市场验证成功值得深入，为了提高敏捷程度，可以另开一条细分市场专属的产品线去支持，和主线脱离。</description>
    </item>
    
    <item>
      <title>管理项目心得</title>
      <link>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97%E5%88%B0/</link>
      <pubDate>Wed, 22 Jun 2022 00:10:00 +0800</pubDate>
      
      <guid>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97%E5%88%B0/</guid>
      <description>很多团队项目管理是产品来做，项目管理方法论相比产品方法论，是能通用的，价值也体现的更显性。
借此处总结一下我的心得。
前置条件：有没有抓手？ 抓手往往是公司赋予的，可以是显性的，也可以是隐形的，比如公司的晋升机制，奖金，老板。
总之要有项目成员care的东西。
没有抓手，管理无从谈起。
管理的一半：做计划 执行为什么会出问题？为什么会有理解gap？因为没最做好计划、没对齐目标。
执行起来去再去解决项目问题往往比较麻烦，大概率有人会受委屈，因为轮子已经跑起来了，动一点就连带一群。
可以参考产品写prd、程序员写代码，多话时间想，想清楚再执行，执行起来就是自然而然的事情了。
做好执行的前置工作，就成功了一半。
计划的核心是清晰、公开，一般包含这如下内容：
项目的背景与目标：范围要清晰、明确、周知 Todo是什么：不要模糊，不要有侥幸心理留坑 个人计划：「谁」在「什么时间点」「干什么事情」：要提前与其他人达成一致 整体计划：由个人计划串联得到 计划发生变化时，怎么处理？：保留 buffer，建立备选方案 管理的另一半：盯执行 项目管理最终的目标是按时上线。
执行过程，问题是肯定有的，不怕问题，只怕问题拖到最后，只要能提前预知问题，就能提前解决。
理想情况是刚碰到风险边界时，就能同步到项目经理。
为了让大家提前暴露风险，我们有一些工具可以使用，比如站会，对齐会，周会，形成公开同步信息的习惯、讨论氛围。
项目管理注意点 调动大家积极性，可以提升参与感，每人轮流主持站会，不同的任务段指定一个负责人，是有效手段。 提升项目管理成员的给用户体验，通过机制缩短信息传递成本（书面的、口头的，比如建立项目 wiki）。 问题难以溯源，这个主要是没做好书面沟通存档导致的，做好书面沟通与记录是延续把前置工作做好的思想。 成员不配合，往往是因为增加工作了对方的成本，这个时候得告知他做了这件事他有什么好处。 不用纠结工具、教条，无论瀑布流、敏捷开发，适合团队才是最好的，专注解决具体的问题。 </description>
    </item>
    
    <item>
      <title>3个基础思考习惯</title>
      <link>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E5%9F%BA%E7%A1%80%E7%9A%84%E6%80%9D%E8%80%83%E4%B9%A0%E6%83%AF/</link>
      <pubDate>Fri, 01 Oct 2021 19:23:23 +0800</pubDate>
      
      <guid>http://link0099.github.io/post/%E4%BA%A7%E5%93%81%E4%B9%8B%E8%B7%AF/%E5%9F%BA%E7%A1%80%E7%9A%84%E6%80%9D%E8%80%83%E4%B9%A0%E6%83%AF/</guid>
      <description>在我职业生涯的整个阶段，有3种思维方式一直贯穿始终，分别是总结思维、验证思维、刻意练习思维；这三种思维方式就是一个完整的飞轮，从信息的输入、到形成认知，到反复训练加深，我分别简单讲述一下这3种思维方式
1、验证思维 验证思维适用于任何道理、知识、结论，产品经理的工作涉及大量外部信息输入，有的直接是结论，即使有再强大的背书，我们也要保持怀疑态度，去反复校验，校验不是为了否定它，而是要找到它的适用边界，从而增加理解
外来的信息，传递过程中会被人为过滤，一般对前置条件、应用范围就描述的不够 持怀疑态度，通用实践去验证，增加理解 举例：牛顿力学三大定律不能应用于量子力学范畴
2、总结思维 总结即将认知客观现象抽象成规律，含2点，认知现象、总结规律：
认知现象即对关注变化（市场上的、公司内部战略的、&amp;hellip;） 抽象即将多个实例形成一个通用规律，涉及到上下两个方向的挖掘：底层共性、上层母题 其中需要注意的点：
抽象是一种杠杆，要明确适用范围，对抽象结果保持审慎 不要过度抽象，要有意义、能解决问题的抽象 3、刻意练习思维 产品经理日常每天都在面对变化、问题，如何让这个思维闭环的飞轮转的更快、螺旋上升的速度更快？最好的方式是增加用例的练习量，不错过日常任意的变化与case，这会消耗大量精力而且反人性，所以需要刻意为之，为的是以后遇到问题能够低成本的解决它（沉淀到快系统）
把每个变化变成每个case，转化为「需求-解决方案」的练习 日拱一卒，持之以恒 长此以往，思维「快系统」将会越来越高效</description>
    </item>
    
  </channel>
</rss>
